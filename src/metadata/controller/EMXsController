{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "EMXsController"
    },
    "designerId": "e3282f86-3944-46c9-a9f6-339833db34db",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExerciseSelect",
                "fn": "onExerciseSelect",
                "implHandler": [
                    "type = record.get(\"type\");",
                    "form = Ext.create('HEART.view.'+type);",
                    "",
                    "form.emxType = type;",
                    "form.goola = 'exercises';",
                    "",
                    "this.getExercises().push(form);"
                ],
                "name": "select",
                "designer|targetType": "Ext.dataview.List",
                "designer|controlQuery": "#exerciseList"
            },
            "designerId": "e6598e40-fef6-4bbf-b6fb-acad809e58de"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "launch",
                "fn": "launch",
                "implHandler": [
                    "this.getExercises().getNavigationBar().hide();",
                    "this.getStressed().getNavigationBar().hide();"
                ]
            },
            "designerId": "dd4da508-1f77-48bf-bffe-c6833c62e462"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "exercises",
                "ref": "exercises",
                "selector": "#exercises"
            },
            "designerId": "bc7a5445-3930-4933-8929-f59f46701fd5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExercisesHide",
                "fn": "onExercisesHide",
                "implHandler": [
                    "this.getExercises().pop();",
                    "this.getExercises().child('dataview').deselectAll();"
                ],
                "name": "hide",
                "designer|targetType": "Ext.navigation.View",
                "designer|controlQuery": "#exercises"
            },
            "designerId": "9910458a-ad91-49e4-a7f7-03e4f9c9ff91"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "stressed",
                "ref": "stressed",
                "selector": "#stressed"
            },
            "designerId": "380bf61c-189c-459b-9819-b72f47a31cf9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onStressedShow",
                "fn": "onStressedShow",
                "implHandler": [
                    "EMXs = Ext.getStore('EMXs');",
                    "count = EMXs.getAllCount();",
                    "",
                    "index = Math.floor(count*Math.random());",
                    "type = EMXs.getAt(index).get('type');",
                    "",
                    "form = Ext.create('HEART.view.'+type);",
                    "",
                    "form.emxType = type;",
                    "form.goola = 'stressed';",
                    "",
                    "this.getStressed().push(form);"
                ],
                "name": "show",
                "designer|targetType": "Ext.navigation.View",
                "designer|controlQuery": "#stressed"
            },
            "designerId": "ab72d431-16a4-43ab-88f3-0cfb5483fa3d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onStressedHide",
                "fn": "onStressedHide",
                "implHandler": [
                    "this.getStressed().pop();"
                ],
                "name": "hide",
                "designer|targetType": "Ext.navigation.View",
                "designer|controlQuery": "#stressed"
            },
            "designerId": "1fa47330-c437-4bfd-93a2-9c8d15ff4fdf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onExerciseDone",
                "fn": "onExerciseDone",
                "implHandler": [
                    "form = button.parent.parent;",
                    "content = form.getValues();",
                    "",
                    "type = form.emxType;",
                    "uuid = HEART.uuid;",
                    "",
                    "content.type = type;",
                    "content.user = uuid;",
                    "",
                    "succ = function(response) {",
                    "\tExt.Msg.alert(':)', \"<div align='center'>Data Submitted</div>\", Ext.emptyFn);",
                    "};",
                    "",
                    "fail = function(response) {",
                    "\tExt.Msg.alert(';(', \"<div align='center'>Network Error</div>\", Ext.emptyFn);",
                    "\tfeeds = Ext.getStore(\"Feeds\");",
                    "\tcontent.timestamp = Date.now();",
                    "\tfeeds.add(content);",
                    "\tfeeds.sort(\"timestamp\", 'DESC');\t\t",
                    "\tfeeds.sync();",
                    "};",
                    "",
                    "HEART.toSensor(content, succ, fail);",
                    "",
                    "if(form.goola=='exercises'){",
                    "\tthis.getExercises().pop();",
                    "\tthis.getExercises().child('dataview').deselectAll();",
                    "}else if(form.goola=='stressed'){",
                    "\tthis.getStressed().hide();",
                    "\tthis.getStressed().show();",
                    "}else{",
                    "\tform.destroy();",
                    "}"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button[action=exercise]"
            },
            "designerId": "4e47477b-a5ac-44a6-9e25-8784b2d2a942"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onEMAInitialize",
                "fn": "onEMAInitialize",
                "implHandler": [
                    "items = component.getInnerItems();",
                    "",
                    "for(i=1;i<items.length;i++){",
                    "\tcomponent.getAt(i).hide();",
                    "}",
                    "",
                    "for(i=0; i< items.length; i++){",
                    "\titem = component.getAt(i);",
                    "\titem.index = i;",
                    "",
                    "\tonChange = function() {",
                    "\t\tnext = component.getAt(this.index+1);",
                    "",
                    "\t\tthis.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "\t\tthis.hide(); ",
                    "\t\tnext.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "\t\tnext.show();",
                    "\t};",
                    "",
                    "\titem.on({ change: onChange });",
                    "}"
                ],
                "name": "initialize",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset[goola=ema]"
            },
            "designerId": "9372221e-b368-4ccb-862f-8a3e0dad0bc0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onEMIInitialize",
                "fn": "onEMIInitialize",
                "implHandler": [
                    "items = component.getInnerItems();",
                    "",
                    "for(i=2;i<items.length;i++){",
                    "\tcomponent.getAt(i).hide();",
                    "}",
                    "",
                    "for(i=1; i< items.length; i++){",
                    "\titem = component.getAt(i);",
                    "\titem.index = i;",
                    "",
                    "\tonChange = function() {",
                    "\t\tnext = component.getAt(this.index+1);",
                    "",
                    "\t\tthis.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "\t\tthis.hide();",
                    "\t\tnext.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "\t\tnext.show();",
                    "\t};",
                    "",
                    "\titem.on({ change: onChange });",
                    "}"
                ],
                "name": "initialize",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset[goola=emi]"
            },
            "designerId": "520222c3-6bb3-47e4-8252-78df62885bb3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onAudioPanelInitialize",
                "fn": "onAudioPanelInitialize",
                "implHandler": [
                    "preSlider = component.child('#pre-slider');",
                    "postSlider = component.child('#post-slider');",
                    "",
                    "button = component.child('button[text=Done]');",
                    "button.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "button.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "",
                    "audioButton = component.child('#audioButton');",
                    "audioButton.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "audioButton.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "",
                    "audioHandle = function(button, e, eOpts) {",
                    "\tif(button.getText()=='Play'){",
                    "\t\tHEART.getAudio().play();",
                    "\t\tbutton.setText('Pause');",
                    "\t}else{",
                    "\t\tHEART.getAudio().pause();",
                    "\t\tbutton.setText('Play');",
                    "\t}",
                    "};",
                    "",
                    "audioButton.on( {tap: audioHandle} );",
                    "",
                    "button.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "",
                    "if(Math.random()<HEART.probability){",
                    "\tpreSlider.destroy();",
                    "\tpostSlider.destroy();",
                    "\tHEART.audioCallback = function() {",
                    "\t\taudioButton.hide();",
                    "\t\tbutton.show();",
                    "\t}",
                    "}else{ ",
                    "\tpreSlider.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "\tpreSlider.on( { change: function() { preSlider.hide(); audioButton.show(); } } );",
                    "\taudioButton.hide();",
                    "\tpostSlider.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "\tpostSlider.hide();",
                    "\tpostSlider.on( { change: function() { postSlider.hide(); button.show(); } } );",
                    "\tHEART.audioCallback =function() {",
                    "\t\taudioButton.hide();",
                    "\t\tpostSlider.show();",
                    "\t}",
                    "}",
                    "",
                    "audioRelease = function() { ",
                    "\taudio=HEART.getAudio();",
                    "\tif(HEART!='strawberry'){",
                    "\t\taudio.release();",
                    "\t\taudio='strawberry';",
                    "\t}   ",
                    "};",
                    "",
                    "component.on({ activeitemchange: audioRelease });",
                    "",
                    "button.on( { tap: audioRelease } );",
                    "",
                    "button.hide();"
                ],
                "name": "initialize",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset[goola=audio]"
            },
            "designerId": "412aeae3-588e-4c8a-94de-857f389ec065"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onReflectionInitialize",
                "fn": "onReflectionInitialize",
                "implHandler": [
                    "preSlider = component.child('#pre-slider');",
                    "",
                    "write = component.child('button[text=Write]');",
                    "",
                    "reflect = component.child('#reflect');",
                    "",
                    "postSlider = component.child('#post-slider');",
                    "",
                    "button = component.child('button[text=Done]');",
                    "",
                    "callback = {};",
                    "button.hide();",
                    "",
                    "button.setHideAnimation({type: \"fadeOut\", duration: 128});",
                    "button.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "",
                    "if(Math.random()<HEART.probability){",
                    "\tpreSlider.destroy();",
                    "\tpostSlider.destroy();",
                    "",
                    "\tcallback = function() {",
                    "\t\tvalue = reflect.getValue();",
                    "\t\tif(value.length<2){",
                    "\t\t\tbutton.hide();",
                    "\t\t}else{",
                    "\t\t\tbutton.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "}else{",
                    "",
                    "\tpreSlider.on( { change: function() { preSlider.hide(); write.show(); } } );",
                    "",
                    "\twrite.hide();",
                    "\twrite.setShowAnimation({type: \"fadeIn\", duration: 1024});",
                    "",
                    "\tcallback = function() {",
                    "\t\tvalue = reflect.getValue();",
                    "\t\tif(value.length<2){",
                    "\t\t\tpostSlider.hide();",
                    "\t\t}else{",
                    "\t\t\tpostSlider.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tanother = function() {",
                    "\t\tvalue = reflect.getValue();",
                    "\t\tif(value.length<2){",
                    "\t\t\tbutton.hide();",
                    "\t\t}else{",
                    "\t\t\tbutton.show();",
                    "\t\t}",
                    "\t};",
                    "",
                    "\tpostSlider.hide();",
                    "\tpostSlider.on( { change: function() { postSlider.hide(); button.show(); reflect.un('keyup', callback); reflect.on( 'keyup', another ); } } );",
                    "",
                    "}",
                    "",
                    "write.setHideAnimation( { type: \"fadeOut\", duration: 128 } );",
                    "write.on( { tap: function() { write.hide(); reflect.show(); } } );",
                    "",
                    "reflect.on( 'keyup', callback );"
                ],
                "name": "initialize",
                "designer|targetType": "Ext.form.FieldSet",
                "designer|controlQuery": "fieldset[goola=reflect]"
            },
            "designerId": "fb3c61e1-76c1-4bd8-bf02-e040eae2ea90"
        }
    ]
}