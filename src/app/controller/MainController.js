/*
 * File: app/controller/MainController.js
 * Date: Sun Apr 07 2013 15:55:57 GMT+0800 (CST)
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HEART.controller.MainController', {
	extend: 'Ext.app.Controller',

	config: {
		refs: {
			homePanel: '#homepanel',
			stressed: '#stressed'
		},

		control: {
			"#homepanel #editIntention": {
				tap: 'onEditIntentionTap'
			},
			"#homepanel #homeSlider": {
				change: 'onHomeSliderChange'
			},
			"#homepanel #homeDone": {
				tap: 'onHomeDoneTap'
			},
			"#settings #setNotifications": {
				tap: 'onPushSettingEdit'
			},
			"#stressed": {
				activate: 'onStressedActivate',
				deactivate: 'onStressedDeactivate'
			},
			"#homepanel": {
				show: 'onHomePanelActive'
			}
		}
	},

	onEditIntentionTap: function(button, e, eOpts) {
		var intention = Ext.create('HEART.view.EMIIntentionSet');
		Ext.Viewport.setActiveItem(intention);
	},

	onHomeSliderChange: function(me, Slider, thumb, newValue, oldValue, eOpts) {
		var value = Slider.getValue();
		me.parent.child('#homeDone').enable();
		setTimeout(function(){Slider.setValue(value/2)}, 60000);
	},

	onHomeDoneTap: function(button, e, eOpts) {
		button.disable();
		setTimeout(function(){button.enable()}, 300000);
	},

	onPushSettingEdit: function(button, e, eOpts) {
		var users = Ext.getStore('Users');
		var uuid = Ext.device.Device.uuid;
		uuid = 'qwertyuiop';
		values = button.parent.getValues();
		values.uuid = uuid;

		var index = users.findBy(function(record){ return record.data.uuid==uuid });

		if(index >= 0){
			users.removeAll();	
		}

		users.add(values);
		users.sync();

		this.getHomePanel().parent.getTabBar().show();

		var form = Ext.create('HEART.view.EMIPushSlider');
		Ext.Viewport.setActiveItem(form);
	},

	onStressedActivate: function(container, newActiveItem, oldActiveItem, eOpts) {
		var EMXs = Ext.getStore('EMXs');
		var count = EMXs.getAllCount();
		var index = Math.floor(count*Math.random());
		var exercise = EMXs.getAt(index);
		var pnl = Ext.create('HEART.view.' + exercise.get("type"));
		pnl.record_data = exercise;
		this.getStressed().push(pnl);
	},

	onStressedDeactivate: function(container, newActiveItem, oldActiveItem, eOpts) {
		this.getStressed().pop();
	},

	onHomePanelActive: function(component, eOpts) {
		var feeds = Ext.getStore('Feeds');
		intention = feeds.findRecord('activity', 'intention');
		var text = intention.get('formData');
		this.getHomePanel().child('button').setText(text);
	}

});