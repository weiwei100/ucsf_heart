/*
 * File: app/view/MainTabs.js
 * Date: Fri May 03 2013 20:32:34 GMT+0800 (CST)
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HEART.view.MainTabs', {
	extend: 'Ext.tab.Panel',
	alias: 'widget.mainview',

	config: {
		id: 'mainTabs',
		ui: 'light',
		hideAnimation: {
			type: 'fadeOut',
			duration: 256
		},
		showAnimation: {
			type: 'fadeIn',
			duration: 1024
		},
		layout: {
			animation: 'slide',
			type: 'card'
		},
		items: [
			{
				xtype: 'formpanel',
				title: 'Home',
				iconCls: 'home',
				id: 'homePanel',
				items: [
					{
						xtype: 'image',
						centered: false,
						docked: 'top',
						height: 70,
						html: '<center><img src="logo_header.png"></center>',
						margin: '5px',
						maxWidth: '',
						style: '',
						ui: 'light',
						width: '100%',
						src: ''
					},
					{
						xtype: 'container',
						border: '1px',
						itemId: 'cntIntention',
						padding: '',
						style: 'background-color:white; margin:5px; border: solid 1px; border-radius:5px;',
						items: [
							{
								xtype: 'label',
								html: '<center>My intention for this week is:</center>',
								itemId: 'homeTitle'
							},
							{
								xtype: 'button',
								action: 'intention',
								baseCls: 'x-html',
								itemId: 'editIntention',
								iconCls: 'compose',
								iconMask: true,
								text: '<b>press here to set</b>'
							}
						]
					},
					{
						xtype: 'sliderfield',
						itemId: 'homeSlider',
						label: 'Notice your body and emotions.  Right now, how do you feel?<div><span style="float:right">balanced</span><span>overwhelmed</span></div> ',
						labelAlign: 'top',
						labelWrap: true,
						name: 'stress',
						value: [
							50
						]
					},
					{
						xtype: 'button',
						disabled: false,
						hidden: true,
						itemId: 'homeDone',
						text: 'Done'
					}
				]
			},
			{
				xtype: 'navigationview',
				title: 'I\'m stressed!',
				iconCls: 'user',
				id: 'stressed'
			},
			{
				xtype: 'navigationview',
				title: 'Exercises',
				iconCls: 'organize',
				id: 'exercises',
				items: [
					{
						xtype: 'list',
						id: 'exerciseList',
						hideOnMaskTap: true,
						allowDeselect: true,
						disableSelection: false,
						emptyText: 'Nothing',
						itemTpl: [
							'<div>{title}</div>'
						],
						pressedDelay: 64,
						store: 'EMXs',
						grouped: true
					}
				]
			},
			{
				xtype: 'navigationview',
				title: 'Settings',
				badgeText: '',
				iconCls: 'settings',
				itemId: 'settingsNav',
				items: [
					{
						xtype: 'formpanel',
						title: 'Settings',
						id: 'settings',
						items: [
							{
								xtype: 'textfield',
								itemId: 'firstname',
								label: 'First name',
								labelWidth: '50%',
								name: 'name',
								autoCapitalize: true,
								maxLength: 15
							},
							{
								xtype: 'textfield',
								itemId: 'childName',
								label: 'Child\'s name',
								labelWidth: '50%',
								name: 'child_name',
								autoCapitalize: true,
								maxLength: 15
							},
							{
								xtype: 'selectfield',
								itemId: 'wakeTime',
								label: 'Wake time',
								labelWidth: '50%',
								name: 'wake_time',
								readOnly: false
							},
							{
								xtype: 'selectfield',
								itemId: 'sleepTime',
								label: 'Sleep time',
								labelWidth: '50%',
								name: 'sleep_time',
								readOnly: false
							},
							{
								xtype: 'button',
								itemId: 'settingsDone',
								ui: 'action',
								text: 'Set Notification Frequency'
							},
							{
								xtype: 'button',
								itemId: 'settingsSave',
								text: 'Save'
							},
							{
								xtype: 'label',
								html: '<br/>'
							},
							{
								xtype: 'button',
								itemId: 'btnInfo',
								iconCls: 'info',
								iconMask: true,
								text: 'Debug Info'
							}
						]
					}
				],
				navigationBar: {
					docked: 'top'
				}
			}
		],
		tabBar: {
			docked: 'bottom',
			ui: 'light',
			layout: {
				align: 'center',
				type: 'hbox'
			}
		},
		listeners: [
			{
				fn: 'onHomeSliderChange',
				event: 'change',
				delegate: '#homeSlider'
			},
			{
				fn: 'onHomeDoneTap',
				event: 'tap',
				delegate: '#homeDone'
			},
			{
				fn: 'onSettingsDoneTap',
				event: 'tap',
				delegate: '#settingsDone'
			},
			{
				fn: 'onSettngsSaveTap',
				event: 'tap',
				delegate: '#settingsSave'
			},
			{
				fn: 'onbtnInfo',
				event: 'tap',
				delegate: '#btnInfo'
			}
		]
	},

	onHomeSliderChange: function(me, Slider, thumb, newValue, oldValue, eOpts) {
		value = me.getValue();

		HEART.setItem('local', 'home', value);


		var button = me.parent.child('#homeDone');
		button.setShowAnimation({type: "fadeIn", duration: 1024});

		button.show();

		setTimeout(function(){me.setValue(50);},60000);
	},

	onHomeDoneTap: function(button, e, eOpts) {
		content = {};
		content.homeSlider = button.parent.child("#homeSlider").getValue();

		content.type = 'homePanel';
		content.action = 'set';
		HEART.toSensor(content);

		button.setHideAnimation({type: "fadeOut", duration: 1024});

		button.hide();
	},

	onSettingsDoneTap: function(button, e, eOpts) {
		//if(button.parent.parent.saveSettings(button)){

		//	this.getTabBar().show();
		form = Ext.create('HEART.view.EMIPushSlider');
		form.emxType = 'EMIPushSlider';
		//console.log(Ext.Viewport.getActiveItem().getActiveItem());
		//Ext.Viewport.getActiveItem().setActiveItem(form);
		button.parent.parent.push(form);

		//}
	},

	onSettngsSaveTap: function(button, e, eOpts) {
		if(button.parent.parent.parent.saveSettings(button)){

			this.getTabBar().show();

			button.parent.parent.parent.setActiveItem(0);
			button.parent.child('#settingsDone').show();
		}
	},

	onbtnInfo: function(button, e, eOpts) {
		Ext.Msg.alert("Info", "UUID: " + HEART.uuid + "<br/>Cached Feed Items: " + Ext.getStore('Feeds').getAllCount() + "<br/>User Info: " + HEART.getItem('local','user'));
	},

	initialize: function() {
		this.callParent();

		user = HEART.getItem('local','user');
		settings = this.child('#settingsNav').child('#settings');
		settingsNav = this.child('#settingsNav');
		wakeOptions = new Array();

		for( i=5; i<12; i++ ){	
			option = { text: i +': 00', value: i };	
			wakeOptions.push(option);
			option = { text: i +': 30', value: i+0.5 };
			wakeOptions.push(option);
		}

		settings.child('#wakeTime').setOptions(wakeOptions);

		sleepOptions = new Array();

		for( i=18; i<24; i++ ){	
			option = { text: i +': 00', value: i };	
			sleepOptions.push(option);
			option = { text: i +': 30', value: i+0.5 };
			sleepOptions.push(option);
		}

		settings.child('#sleepTime').setOptions(sleepOptions);
		/*
		heightOptions = new Array();

		heightOptions.push( {text: "4'11\"", value: 59});
		heightOptions.push( {text: "5'0\"", value: 60});
		heightOptions.push( {text: "5'1\"", value: 61});
		heightOptions.push( {text: "5'2\"", value: 62});
		heightOptions.push( {text: "5'3\"", value: 63});
		heightOptions.push( {text: "5'4\"", value: 64});
		heightOptions.push( {text: "5'5\"", value: 65});
		heightOptions.push( {text: "5'6\"", value: 66});
		heightOptions.push( {text: "5'7\"", value: 67});
		heightOptions.push( {text: "5'8\"", value: 68});
		heightOptions.push( {text: "5'9\"", value: 69});
		heightOptions.push( {text: "5'10\"", value: 70});
		heightOptions.push( {text: "5'11\"", value: 71});
		heightOptions.push( {text: "6'0\"", value: 72});
		heightOptions.push( {text: "6'1\"", value: 73});
		heightOptions.push( {text: "6'2\"", value: 74});
		heightOptions.push( {text: "6'3\"", value: 75});
		heightOptions.push( {text: "6'4\"", value: 76});
		heightOptions.push( {text: "6'5\"", value: 77});
		heightOptions.push( {text: "6'6\"", value: 78});

		settings.child("#height").setOptions(heightOptions);

		*/


		if( user===null ){
			settings.child('#settingsDone').hide();
			this.getTabBar().hide();
			this.setActiveItem(settingsNav);
		}else{
			user = JSON.parse(user);
			settings.setValues(user);
			hVar = HEART.getItem('local','home')||50;
			homePanel = this.child('#homePanel');
			slider=homePanel.child('#homeSlider');
			slider.setValue(hVar);
			value=HEART.getItem('local', 'intention');
			console.log("intention: " + value);
			if(value!==null){
				homePanel.child('#cntIntention').child('#editIntention').setText(value);
			}
		}


	},

	saveSettings: function(button) {
		user = HEART.getItem('local', 'user');

		values = button.parent.getValues();

		var empty;

		for(field in values){
			if(values[field]=='')
			{ empty=true; break; }
		}

		if(empty){
			Ext.Msg.alert('Error', "You must fill out all information before continuing", Ext.emptyFn);

		return false;}

		values.uuid = HEART.uuid;

		if(user!=null){
			user = JSON.parse(user);
			value = user.priority||2;	
			values.priority = value;
		}

		user = JSON.stringify(values);

		HEART.setItem('local', 'user', user);

		succ = function(response) {
			console.log(response);
		};

		fail = function(response) {
			console.log(response);
		};

		content = {};

		content.uid=HEART.uuid;
		content.name = values.name;
		content.child_name = values.child_name;
		content.weight = values.weight;
		content.height = values.height;
		content.gender = values.gender; 
		content.wakeup=values.wake_time;
		content.sleep=values.sleep_time;

		HEART.toUser( content, succ, fail );
		///////////////////////////////////////
		user = HEART.getItem('local', 'pnapi');
		user = JSON.parse(user)||{};

		user.uid = HEART.uuid;
		user.wakeup = values.wake_time;
		user.sleep = values.sleep_time;

		user = JSON.stringify(user);
		HEART.setItem('local', 'pnapi', user);
		///////////////////////////////////////
		return true;
	}

});