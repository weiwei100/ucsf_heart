/*
 * File: app/view/FEEDBACK.js
 * Date: Wed Jul 17 2013 19:30:04 GMT+0800 (CST)
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HEART.view.FEEDBACK', {
	extend: 'Ext.form.Panel',

	config: {
		cls: 'feedback',
		layout: {
			type: 'vbox'
		},
		//scrollable: 'vertical',
		items: [
			{
				xtype: 'fieldset',
				//flex: 5,
				itemId: 'activity',
				//scrollable: 'vertical',
				title: 'My Activity',
				items: [
					{
						xtype: 'label',
						html: 'Here is your summary statistics of your activities this week. <br/> (Note: Missed days count as 0)',
						cls: 'x-label-desc',
						itemId: 'describe'
					},
					{
						xtype: 'label',
						html: 'You exercised XX times this week.',
						itemId: 'exercised'
					},
					{
						xtype: 'label',
						html: 'You did mindful eating XX times this week.',
						itemId: 'mindfulEating'
					},
					{
						xtype: 'label',
						html: 'You did meditation on XX days (%), and roughly XX minutes this week.',
						itemId: 'meditation'
					},
					{
						xtype: 'label',
						html: 'Your stress level: Your range of stress was XX to XX, the average is XX.',
						itemId: 'stressLevel'
					},
					{
						xtype: 'label',
						html: 'Your average feelings of balance were XX.',
						itemId: 'balanceFeeling'
					}
				],
				listeners: [
					{
						fn: function(component, eOpts) {


							mylog = JSON.parse(HEART.getItem('local', 'mylog'))||{};

							dead = new Date(Date.now()-Date.now()%(1000*60*60*24*7)+(1000*60*60*24*10));

							if(mylog.expire){
								if(Date.now()>mylog.expire){
									mylog = {};
									mylog.expire = dead;
								}

							}else{
								mylog.expire = dead
							}

							label=component.child('#exercised');

							object = mylog.exercised||{};

							content = '<p>You exercised '+object.times+' times this week ('+object.days+' of days)</p>';

							label.setHtml(content);

							label=component.child('#mindfulEating');

							object = mylog.mindful||{};

							content = '<p>You did mindful eating '+object.times+' times this week ('+object.days+' of the days)</p>';

							label.setHtml(content);

							label=component.child('#meditation');

							object = mylog.meditation||{};

							content = '<p>You did meditation on '+object.days+' days, and roughly '+object.minutes+'minutes this week, (average of '+Math.ceil(object.minutes/object.days)+' per day, which we will count as 5, 15, or 30, depending on which of the 3 choices they clicked.)</p>';

							label.setHtml(content);

							label=component.child('#stressLevel');

							object = mylog.stressed||{};

							content = '<p>Your stress level: Your range of stress was '+object.low+' to '+object.high+', the average is '+object.average+'</p>';

							label.setHtml(content);

							label=component.child('#balanceFeeling');

							object = mylog.balance||{};

							content = '<p>Your average feelings of balance were '+object.average+'</p>';

							label.setHtml(content);

							mylog = JSON.stringify(mylog);

							HEART.setItem('local', 'mylog', mylog);
						},
						event: 'initialize'
					}
				]
			},
			{
				xtype: 'fieldset',
				//flex: 5,
				itemId: 'experience',
				height: 440,
				style: {
					background: 'transparent'
				},
				layout: {
					type: 'vbox'
				},
				//scrollable: 'vertical',
				title: 'My Experience',
				items: [
					{
						xtype: 'list',
						flex: 1,
						itemId: 'explist',
						emptyText: 'Nothing...',
						itemHeight: 20,
						itemTpl: [
							'<span class="x-label"><b>{[ (new Date(values.timestamp-0)).toDateString() ]}</b></span><br/>',
							'<p><span class="x-label">Pleasant: {pleasant}</span><br/>',
							'	<span class="x-label">Unpleasant: {unpleasant}</span></p>'
						],
						store: 'Experiences'
					}
				]
			},
			{
				xtype: 'button',
				itemId: 'ok',
				text: 'OK'
			}
		],
		listeners: [
			{
				fn: 'onOKTap',
				event: 'tap',
				delegate: '#ok'
			}
		]
	},

	onOKTap: function(button, e, eOpts) {
		this.parent.pop();
	}

});