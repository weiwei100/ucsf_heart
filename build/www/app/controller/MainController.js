/*
 * File: app/controller/MainController.js
 * Date: Wed Apr 24 2013 15:56:54 GMT+0800 (CST)
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HEART.controller.MainController', {
	extend: 'Ext.app.Controller',

	config: {
		refs: {
			homePanel: '#homePanel',
			stressed: '#stressed'
		},

		control: {
			"button[action=intention]": {
				tap: 'onEditIntentionTap'
			},
			"#homePanel #homeSlider": {
				change: 'onHomeSliderChange',
				initialize: 'onHomeSliderInitialize'
			},
			"#settings #done": {
				tap: 'onSettingDone'
			},
			"textfield[goola=number]": {
				keyup: 'onNumberFieldKeyup'
			}
		}
	},

	onEditIntentionTap: function(button, e, eOpts) {
		form = Ext.create('HEART.view.EMIIntentionSet');
		form.emxType = 'EMIIntentionSet';
		form.goola = button.getItemId();
		Ext.Viewport.setActiveItem(form);
	},

	onHomeSliderChange: function(me, Slider, thumb, newValue, oldValue, eOpts) {
		value = Slider.getValue();

		uuid = HEART.uuid;

		HEART.setItem('local', 'home', value);

		content = me.parent.getValues();

		content.type = 'homePanel';
		content.uuid = uuid;

		console.log(content);

		var succ = function(response) {
			console.log(response);
		};

		var fail = function(response) {
			feeds = Ext.getStore("Feeds");
			content.timestamp = Date.now();
			feeds.add(data);
			feeds.sort("timestamp", 'DESC');		
			feeds.sync();
		};

		HEART.toSensor(content, succ, fail);

		me.parent.child('#homeDone').enable();

		setTimeout(function(){Slider.setValue(value/2)}, 60000);
	},

	onSettingDone: function(button, e, eOpts) {
		user = HEART.getItem('local', 'user');

		values = button.parent.getValues();
		values.uuid = HEART.uuid;

		if(user!=null){
			user = JSON.parse(user);
			value = user.priority||2;	
			values.priority = value;
		}

		user = JSON.stringify(values);

		HEART.setItem('local', 'user', user);

		var succ = function() {
			Ext.Msg.alert(':)', "<div align='center'>Data Submitted</div>", Ext.emptyFn);
		};

		var fail = function() {
			Ext.Msg.alert(';(', "<div align='center'>Network Error</div>", Ext.emptyFn);
		};

		HEART.toUser( {uid: HEART.uuid, wakeup: values.wake_time, sleep: values.sleep_time}, succ, fail );

		this.getHomePanel().parent.getTabBar().show();

		form = Ext.create('HEART.view.EMIPushSlider');
		form.emxType = 'EMIPushSlider';

		Ext.Viewport.setActiveItem(form);
		
		user = HEART.getItem('local', 'pnapi');
		user = JSON.parse(user)||{};
		  
		user.uid = HEART.uuid;
		user.wakeup = values.wake_time;
		user.sleep = values.sleep_time;
		
		user = JSON.stringify(user);
		HEART.setItem('local', 'pnapi', user);
		
	},

	onNumberFieldKeyup: function(textfield, e, eOpts) {
		var value = textfield.getValue();

		if(/\D+/.test(value)){
			var message = "<div align='center'>Please don't enter letters or other characters.</div>";
			Ext.Msg.alert(';(', message, Ext.emptyFn);
			textfield.setValue(0);
		}
	},

	onHomeSliderInitialize: function(component, eOpts) {
		value = HEART.getItem('local', 'home');
		component.setValue(value);
	},

	launch: function() {
		value = HEART.getItem('local', 'intention');
		if(value!=null){
			this.getHomePanel().child('button').setText(value);
		}

		if(Ext.device.Connection.isOnline()){
			HEART.sync();
		}
	}

});