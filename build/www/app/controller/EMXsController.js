/*
 * File: app/controller/EMXsController.js
 * Date: Mon Apr 22 2013 18:28:53 GMT+0800 (CST)
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HEART.controller.EMXsController', {
	extend: 'Ext.app.Controller',

	config: {
		refs: {
			exercises: '#exercises',
			stressed: '#stressed'
		},

		control: {
			"#exerciseList": {
				select: 'onExerciseSelect'
			},
			"#exercises": {
				hide: 'onExercisesHide'
			},
			"#stressed": {
				show: 'onStressedShow',
				hide: 'onStressedHide'
			},
			"button[action=exercise]": {
				tap: 'onExerciseDone'
			},
			"fieldset[goola=ema]": {
				initialize: 'onEMAInitialize'
			},
			"fieldset[goola=emi]": {
				initialize: 'onEMIInitialize'
			},
			"fieldset[goola=audio]": {
				initialize: 'onAudioPanelInitialize'
			},
			"fieldset[goola=reflect]": {
				initialize: 'onReflectionInitialize'
			}
		}
	},

	onExerciseSelect: function(dataview, record, eOpts) {
		type = record.get("type");
		form = Ext.create('HEART.view.'+type);

		form.emxType = type;
		form.goola = 'exercises';

		this.getExercises().push(form);
	},

	onExercisesHide: function(component, eOpts) {
		this.getExercises().pop();
		this.getExercises().child('dataview').deselectAll();
	},

	onStressedShow: function(component, eOpts) {
		EMXs = Ext.getStore('EMXs');
		count = EMXs.getAllCount();

		index = Math.floor(count*Math.random());
		type = EMXs.getAt(index).get('type');

		form = Ext.create('HEART.view.'+type);

		form.emxType = type;
		form.goola = 'stressed';

		this.getStressed().push(form);
	},

	onStressedHide: function(component, eOpts) {
		this.getStressed().pop();
	},

	onExerciseDone: function(button, e, eOpts) {
		form = button.parent.parent;
		content = form.getValues();

		console.log(content);

		type = form.emxType;
		uuid = HEART.uuid;

		content.type = type;
		content.user = uuid;

		succ = function(response) {
			Ext.Msg.alert(':)', "<div align='center'>Data Submitted</div>", Ext.emptyFn);
		};

		fail = function(response) {
			Ext.Msg.alert(';(', "<div align='center'>Network Error</div>", Ext.emptyFn);
			feeds = Ext.getStore("Feeds");
			content.timestamp = Date.now();
			feeds.add(content);
			feeds.sort("timestamp", 'DESC');		
			feeds.sync();
		};

		HEART.toSensor(content, succ, fail);

		if(form.goola=='exercises'){
			this.getExercises().pop();
			this.getExercises().child('dataview').deselectAll();
		}else if(form.goola=='stressed'){
			this.getStressed().hide();
			this.getStressed().show();
		}else{
			form.destroy();
		}
	},

	onEMAInitialize: function(component, eOpts) {
		items = component.getInnerItems();

		for(i=1;i<items.length;i++){
			component.getAt(i).hide();
		}

		for(i=0; i< items.length; i++){
			item = component.getAt(i);
			item.index = i;

			onChange = function() {
				next = component.getAt(this.index+1);

				this.setHideAnimation({type: "fadeOut", duration: 128});
				this.hide(); 
				next.setShowAnimation({type: "fadeIn", duration: 1024});
				next.show();
			};

			item.on({ change: onChange });
		}
	},

	onEMIInitialize: function(component, eOpts) {
		items = component.getInnerItems();

		for(i=2;i<items.length;i++){
			component.getAt(i).hide();
		}

		for(i=1; i< items.length; i++){
			item = component.getAt(i);
			item.index = i;

			onChange = function() {
				next = component.getAt(this.index+1);

				this.setHideAnimation({type: "fadeOut", duration: 128});
				this.hide();
				next.setShowAnimation({type: "fadeIn", duration: 1024});
				next.show();
			};

			item.on({ change: onChange });
		}
	},

	onAudioPanelInitialize: function(component, eOpts) {
	  
		component.on({ activeitemchange: function(){
		  HEART.getAudio().release();  
		}});
		
		preSlider = component.child('#pre-slider');
		postSlider = component.child('#post-slider');
	
		button = component.child('button[text=Done]');
		button.setHideAnimation({type: "fadeOut", duration: 128});
		button.setShowAnimation({type: "fadeIn", duration: 1024});
		
		audioButton = component.child('#audioButton');
		audioButton.setHideAnimation({type: "fadeOut", duration: 128});
		audioButton.setShowAnimation({type: "fadeIn", duration: 1024});
		
		audioHandle = function(button, e, eOpts) {
		  if(button.getText()=='Play'){
		    HEART.getAudio().play();
		    button.setText('Pause');
		  }else{
		    HEART.getAudio().pause();
		    button.setText('Play');
		  }
		};
		
		audioButton.on( {tap: audioHandle} );
		
		button.setShowAnimation({type: "fadeIn", duration: 1024});

		if(Math.random()<HEART.probability){
			preSlider.destroy();
			postSlider.destroy();
			HEART.audioCallback = function() {
			  audioButton.hide();
			  button.show();
			}
		}else{ 
			preSlider.setHideAnimation({type: "fadeOut", duration: 128});
			preSlider.on( { change: function() { preSlider.hide(); audioButton.show(); } } );
			audioButton.hide();
			postSlider.setShowAnimation({type: "fadeIn", duration: 1024});
			postSlider.hide();
			postSlider.on( { change: function() { postSlider.hide(); button.show(); } } );
			HEART.audioCallback =function() {
			  audioButton.hide();
			  postSlider.show();
			}
		}
		
		button.on( { tap: function() { HEART.getAudio().release(); } } );
		
		button.hide();
		
	},

	onReflectionInitialize: function(component, eOpts) {
		preSlider = component.child('#pre-slider');

		write = component.child('button[text=Write]');

		reflect = component.child('#reflect');

		postSlider = component.child('#post-slider');

		button = component.child('button[text=Done]');

		callback = {};
		button.hide();

		button.setHideAnimation({type: "fadeOut", duration: 128});
		button.setShowAnimation({type: "fadeIn", duration: 1024});

		if(Math.random()<HEART.probability){
			preSlider.destroy();
			postSlider.destroy();

			callback = function() {
				value = reflect.getValue();
				if(value.length<2){
					button.hide();
				}else{
					button.show();
				}
			};

		}else{

			preSlider.on( { change: function() { preSlider.hide(); write.show(); } } );

			write.hide();
			write.setShowAnimation({type: "fadeIn", duration: 1024});

			callback = function() {
				value = reflect.getValue();
				if(value.length<2){
					postSlider.hide();
				}else{
					postSlider.show();
				}
			};

			another = function() {
				value = reflect.getValue();
				if(value.length<2){
					button.hide();
				}else{
					button.show();
				}
			};

			postSlider.hide();
			postSlider.on( { change: function() { postSlider.hide(); button.show(); reflect.un('keyup', callback); reflect.on( 'keyup', another ); } } );

		}

		write.setHideAnimation( { type: "fadeOut", duration: 128 } );
		write.on( { tap: function() { write.hide(); reflect.show(); } } );

		reflect.on( 'keyup', callback );
	},

	launch: function() {
		this.getStressed().getNavigationBar().hide();
		this.getExercises().getNavigationBar().hide();
	}

});